
services:
  backend_main_api:
    build:
      context: ./
      dockerfile: Dockerfile 
    container_name: backend_main_api
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      - postgresql_db
    environment:
      BACKEND_GC_TITLE: ${BACKEND_GC_TITLE}
      BACKEND_GC_DESCRIPTION: ${BACKEND_GC_DESCRIPTION}
      BACKEND_GC_API_PREFIX: ${BACKEND_GC_API_PREFIX}
      BACKEND_GC_HOST: ${BACKEND_GC_HOST}
      BACKEND_GC_PORT: ${BACKEND_GC_PORT}
      BACKEND_GC_OPENAPI_PREFIX: ${BACKEND_GC_OPENAPI_PREFIX}
      BACKEND_SECURITY_SECRET_KEY: ${BACKEND_SECURITY_SECRET_KEY}
      BACKEND_SECURITY_ALGORITHM: ${BACKEND_SECURITY_ALGORITHM}
      BACKEND_APP_ENVIRONMENT: ${BACKEND_APP_ENVIRONMENT}
      BACKEND_DB_PSQL_HOST: ${BACKEND_DB_PSQL_HOST}
      BACKEND_DB_PSQL_NAME: ${BACKEND_DB_PSQL_NAME}
      BACKEND_DB_PSQL_PASSWORD: ${BACKEND_DB_PSQL_PASSWORD}
      BACKEND_DB_PSQL_PORT: ${BACKEND_DB_PSQL_PORT}
      BACKEND_DB_PSQL_USER: ${BACKEND_DB_PSQL_USER}
      FRONTEND_URL: ${FRONTEND_URL}
      FRONTEND_PORT: ${FRONTEND_PORT}
    networks:
      - saluai5-backend 
    volumes:
      - ./app:/app
      - ./tests:/tests
      - ./pytest.ini:/pytest.ini
      - ./.coveragerc:/.coveragerc
  
  postgresql_db:
    image: postgres:15
    container_name: postgresql_db
    restart: always
    environment:
      POSTGRES_USER: ${BACKEND_DB_PSQL_USER}
      POSTGRES_PASSWORD: ${BACKEND_DB_PSQL_PASSWORD}
      POSTGRES_DB: ${BACKEND_DB_PSQL_NAME}
    networks:
      - saluai5-backend
    volumes:
      - postgres_data:/var/lib/postgresql/data

networks:
  saluai5-backend:
    driver: bridge

volumes:
  postgres_data:
    driver: local